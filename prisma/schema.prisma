// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role      @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  assignedTasks Tasks[] @relation("TaskAssignee")
  createdTasks  Tasks[] @relation("TaskCreator")

  userTeams UserTeam[]

  clientProjects Project[] @relation("ClientProjects")

  taskComments       TaskComment[]       @relation("TaskComments")
  projectComments    ProjectComment[]    @relation("ProjectComments")
  taskAttachments    TaskAttachment[]    @relation("TaskAttachments")
  projectAttachments ProjectAttachment[] @relation("ProjectAttachments")
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String? // For UI theming
  icon        String? // Icon identifier
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userTeams UserTeam[]
  projects  Project[]
}

model UserTeam {
  userId   String
  teamId   String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model Tasks {
  taskId      String    @id @default(cuid())
  title       String
  description String?
  status      Status    @default(PENDING)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  assignedTo User   @relation("TaskAssignee", fields: [userId], references: [id])
  userId     String

  assignedBy   User   @relation("TaskCreator", fields: [assignedById], references: [id])
  assignedById String

  Timer       Timer[]
  comments    TaskComment[]
  attachments TaskAttachment[]

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Timer {
  id        String    @id @default(cuid())
  startTime DateTime?
  endTime   DateTime?
  duration  Int?
  taskId    String
  task      Tasks     @relation(fields: [taskId], references: [taskId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  clientId    String? // Link to client user
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tasks       Tasks[]
  team        Team?               @relation(fields: [teamId], references: [id])
  teamId      String?
  client      User?               @relation("ClientProjects", fields: [clientId], references: [id])
  comments    ProjectComment[]
  attachments ProjectAttachment[]
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId String
  task   Tasks  @relation(fields: [taskId], references: [taskId], onDelete: Cascade)

  authorId String
  author   User   @relation("TaskComments", fields: [authorId], references: [id])
}

model ProjectComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation("ProjectComments", fields: [authorId], references: [id])
}

model TaskAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())

  taskId String
  task   Tasks  @relation(fields: [taskId], references: [taskId], onDelete: Cascade)

  uploadedById String
  uploadedBy   User   @relation("TaskAttachments", fields: [uploadedById], references: [id])
}

model ProjectAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  uploadedById String
  uploadedBy   User   @relation("ProjectAttachments", fields: [uploadedById], references: [id])
}

enum Role {
  SUPER_ADMIN
  MANAGER
  PROFESSIONAL
  CLIENT
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
