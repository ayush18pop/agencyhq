generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  username           String?             @unique
  password           String
  emailVerified      DateTime?
  image              String?
  role               Role                @default(CLIENT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  clientProjects     Project[]           @relation("ClientProjects")
  projectAttachments ProjectAttachment[] @relation("ProjectAttachments")
  projectComments    ProjectComment[]    @relation("ProjectComments")
  taskAttachments    TaskAttachment[]    @relation("TaskAttachments")
  taskComments       TaskComment[]       @relation("TaskComments")
  createdTasks       Tasks[]             @relation("TaskCreator")
  assignedTasks      Tasks[]             @relation("TaskAssignee")
  userTeams          UserTeam[]
  timeLogs           Timer[] // Add this back-relation
}

model Team {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projects    Project[]
  userTeams   UserTeam[]
}

model UserTeam {
  userId   String
  teamId   String
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model Tasks {
  taskId       String           @id @default(cuid())
  title        String
  description  String?
  status       Status           @default(PENDING)
  priority     Priority         @default(MEDIUM)
  dueDate      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  userId       String
  assignedById String
  projectId    String?
  attachments  TaskAttachment[]
  comments     TaskComment[]
  assignedBy   User             @relation("TaskCreator", fields: [assignedById], references: [id])
  project      Project?         @relation(fields: [projectId], references: [id])
  assignedTo   User             @relation("TaskAssignee", fields: [userId], references: [id])
  timeLogs     Timer[]
}

model Timer {
  id        String    @id @default(cuid())
  startTime DateTime?
  endTime   DateTime?
  duration  Int?
  taskId    String
  userId    String
  task      Tasks     @relation(fields: [taskId], references: [taskId])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String              @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  clientId    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  teamId      String?
  client      User?               @relation("ClientProjects", fields: [clientId], references: [id])
  team        Team?               @relation(fields: [teamId], references: [id])
  attachments ProjectAttachment[]
  comments    ProjectComment[]
  tasks       Tasks[]
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  authorId  String
  author    User     @relation("TaskComments", fields: [authorId], references: [id])
  task      Tasks    @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
}

model ProjectComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  authorId  String
  author    User     @relation("ProjectComments", fields: [authorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TaskAttachment {
  id           String   @id @default(cuid())
  filename     String
  fileUrl      String
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime @default(now())
  taskId       String
  uploadedById String
  task         Tasks    @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  uploadedBy   User     @relation("TaskAttachments", fields: [uploadedById], references: [id])
}

model ProjectAttachment {
  id           String   @id @default(cuid())
  filename     String
  fileUrl      String
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime @default(now())
  projectId    String
  uploadedById String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation("ProjectAttachments", fields: [uploadedById], references: [id])
}

enum Role {
  SUPER_ADMIN
  MANAGER
  PROFESSIONAL
  CLIENT
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
